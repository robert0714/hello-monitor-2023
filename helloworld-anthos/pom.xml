<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
	<groupId>com.cht.helloworld</groupId>
    <artifactId>weather-app-cloud-ready</artifactId>
    <packaging>war</packaging>
    <version>1.0</version>

    <properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
		
        <failOnMissingWebXml>false</failOnMissingWebXml>
        <version.wildfly>26.1.3.Final</version.wildfly>
        <version.jboss.bom>26.1.3.Final</version.jboss.bom>
        <version.wildfly-jar.maven.plugin>7.0.2.Final</version.wildfly-jar.maven.plugin> 
        
        <!-- other plugin versions -->
        <version.compiler.plugin>3.8.1</version.compiler.plugin>
        <version.surefire.plugin>2.22.2</version.surefire.plugin>
        <version.failsafe.plugin>2.22.2</version.failsafe.plugin>
		<version.arquillian_jacoco>1.1.0</version.arquillian_jacoco>
        
        <version.arquillian.persistence>1.0.0.Alpha7</version.arquillian.persistence>
		<version.wildfly-datasources-galleon-pack>2.0.2.Final</version.wildfly-datasources-galleon-pack>
    </properties>

    <dependencyManagement>
        <dependencies>            
            <!-- importing the jakartaee8-with-tools BOM adds specs and other useful artifacts as managed dependencies -->
            <dependency>
                <groupId>org.wildfly.bom</groupId>
                <artifactId>wildfly-jakartaee8-with-tools</artifactId>
                <version>${version.wildfly}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>  
            
            <!-- importing the microprofile BOM adds MicroProfile specs -->
            <dependency>
			    <groupId>org.wildfly.bom</groupId>
			    <artifactId>wildfly-microprofile</artifactId>
			    <version>${version.wildfly}</version>
			    <scope>import</scope>
			    <type>pom</type>
			</dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Dependencies for the application code -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>8.0.0</version>
            <scope>provided</scope>
        </dependency>        
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>4.1</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        
       <!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.minidev</groupId>
			<artifactId>json-smart</artifactId>
			<version>2.4.8</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.21.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-spi</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-api-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-spi-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.jboss</groupId>
		    <artifactId>jboss-ejb-client</artifactId>
		    <version>4.0.44.Final</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.wildfly</groupId>
			<artifactId>wildfly-testsuite-shared</artifactId>
			<version>${version.jboss.bom}</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>net.minidev</groupId>
					<artifactId>json-smart</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson2-provider</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency> 
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>2.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jmock</groupId>
            <artifactId>jmock-junit5</artifactId>
            <version>2.12.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>2.21.0</version>
            <!-- If it was upgraded , you would see java.lang.NoSuchMethodError: org.mockito.internal.configuration.plugins.Plugins.getMockitoLogger()Lorg/mockito/plugins/MockitoLogger;  -->
            <scope>test</scope>
        </dependency>
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <version>2.1.214</version>
		    <scope>test</scope>
		</dependency> 
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>2.7.10</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<transitive>false</transitive>
					<artifactItems>
						<artifactItem>
							<groupId>org.wildfly</groupId>
	                        <artifactId>wildfly-dist</artifactId>
	                        <version>${version.wildfly}</version>
	                        <type>zip</type>
	                        <overWrite>false</overWrite>
	                        <outputDirectory>target</outputDirectory>
						</artifactItem>
					</artifactItems>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>copy</goal>
						</goals>
					</execution>
					<execution>
	                     <id>unpack</id>
	                     <phase>process-test-classes</phase>
	                     <goals>
	                        <goal>unpack</goal>
	                     </goals> 
	                </execution>
				</executions>
			</plugin>
			<plugin>
		        <artifactId>maven-surefire-plugin</artifactId>
		        <version>${version.surefire.plugin}</version>
		        <configuration>
		            <enableAssertions>true</enableAssertions>
		            <!-- System properties to forked surefire JVM which runs clients. -->
		            <failIfNoTests>false</failIfNoTests>
		            <systemPropertyVariables>
		                <jboss.home>${basedir}/target/wildfly-${version.jboss.bom}</jboss.home>
		            </systemPropertyVariables>
		        </configuration>
		        <executions>
		            <!-- Disable default-test execution. -->
		            <execution>
		                <id>default-test</id>
		                <goals>
		                    <goal>test</goal>
		                </goals>
		                <phase>none</phase>
		            </execution>
		            <execution>
		                <id>basic-integration-default-full.surefire</id>
		                <phase>test</phase>
		                <goals>
		                    <goal>test</goal>
		                </goals>
		                <configuration>
		                    <!-- Tests to execute. Overriden in webProfileExclusion.profile . -->
		                    <includes>
		                        <include>com/redhat/example/weather/*TestCase.java</include>
								<include>com/redhat/example/weather/*Test.java</include>
		                    </includes>
		                    <!-- Parameters to test cases. -->
		                    <systemPropertyVariables
												combine.children="append">
		                        <jboss.server.config.file.name>standalone-full.xml</jboss.server.config.file.name>
		                        <jboss.options>-Dee8.preview.mode=true</jboss.options>
		                    </systemPropertyVariables>
		                </configuration>
		            </execution>
		        </executions>
		    </plugin>

		    <!-- Coverage Report -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.8</version>
				<configuration>
				</configuration>
				<executions>
					<execution>
						<id>jacoco-initialize</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<phase>test</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
                <version>3.5.0</version>
				<configuration>
					<doclint>none</doclint>
					<charset>UTF-8</charset>
					<show>private</show>
					<nohelp>true</nohelp>
					<excludePackageNames>*.vo</excludePackageNames>
				</configuration>				
			</plugin>
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin> 
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-jar-maven-plugin</artifactId> 
                <version>${version.wildfly-jar.maven.plugin}</version>
                <dependencies>
					<dependency>
						<groupId>org.yaml</groupId>
                        <artifactId>snakeyaml</artifactId>
                        <version>2.0</version>
					</dependency>
				</dependencies>
                <configuration>
                    <feature-packs>
                        <feature-pack> 
                           <location>wildfly@maven(org.jboss.universe:community-universe)#${version.wildfly}</location>
                        </feature-pack>
                        <feature-pack>
                            <groupId>org.wildfly</groupId>
                            <artifactId>wildfly-datasources-galleon-pack</artifactId>
                            <version>${version.wildfly-datasources-galleon-pack}</version>
                        </feature-pack>
                    </feature-packs>
                    <cloud>
				          <type>kubernetes</type>
			        </cloud>
                    <layers>
                        <layer>cloud-server</layer>
                        <layer>postgresql-datasource</layer>
                        <layer>web-console</layer>
                        <layer>microprofile-metrics</layer>
                        <layer>microprofile-health</layer>
                    </layers> 
                    <cli-sessions>
						<cli-session>
							<script-files>							
								<script>webconsole.cli</script> 
							</script-files>
						</cli-session>
					</cli-sessions>
					<extra-server-content-dirs>
                        <extra-content>extra-content</extra-content>
                    </extra-server-content-dirs>
                    <plugin-options>
                        <jboss-fork-embedded>true</jboss-fork-embedded>
                    </plugin-options>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>package</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>